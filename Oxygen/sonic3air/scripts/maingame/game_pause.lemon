/*
	This script file is part of the Sonic 3 A.I.R. script software distribution.
	Copyright (C) 2017-2024 by Eukaryot

	Published under the GNU GPLv3 open source software license, see license.txt
	or https://www.gnu.org/licenses/gpl-3.0.en.html
*/



//-------------------------------------------------------//
// Game pause                                            //
//-------------------------------------------------------//

global float GamePause.visibility = 0.0f
global u8 GamePause.selectedEntry = 0

constant array<string> GamePause.ENTRY_TEXTS = { "Continue", "Restart", "Options", "Exit Game" }
constant u16 GamePause.LINE_HEIGHT = 26


//# address-hook(0x0013e4) end(0x0014e4)
function void UpdateGamePause()
{
#if !STANDALONE
	// This is only used in outro; and there's no actual need to prevent game pause there
	if (global.pause_disabled)
		return
#endif

	if (lives_counter <= 0)
	{
		global.game.paused = false
		return
	}

#if STANDALONE

	// Start button pressed?
	if (control.pad1.pressed & CONTROL_START)
	{
		if (!BeginGamePause())
			return

		global.game.paused = true
		global.frame_state = 0x10

		GamePause.Menu()

		Standalone.onResumeAfterPause()
		global.game.paused = false

	#if GAMEAPP
		// Fix for brief glitch in Blue Spheres special stage
		if (global.game_mode == 0x34)
			BlueSpheres.replacePlaneRendering()
	#endif
	}

#else

	if (!global.game.paused)
	{
		// Start button pressed?
		if ((control.pad1.pressed & CONTROL_START) == 0)
			return

	#if STANDALONE
		if (!BeginGamePause())
			return
	#endif

		// Entering game pause
		global.game.paused = true
	}

	syncZ80_variantB(0x01)

	while (true)
	{
		global.frame_state = 0x10
		waitForNextFrame()
	@EntryPoint:

		if (pausecheats.unlocked)
		{
			if (control.pad1.pressed & CONTROL_A)
			{
				global.game_mode = 0x04		// Title Screen
				break
			}

			if (control.pad1.state & CONTROL_B || control.pad1.pressed & CONTROL_C)
			{
				// Single step
				global.game.paused = true
				syncZ80_variantB(0x80)
				return
			}
		}

		// In competition mode, button B during pause quits the stage
		if (global.zone >= 0x0e && global.zone <= 0x12)
		{
			if ((control.pad1.pressed & CONTROL_B) && (competition_mode.game_mode < 0))
			{
				global.game_mode = 0xc0		// Competition Mode Level Select, fading
				break
			}
		}

		if (control.pad1.pressed & CONTROL_START)
			break
	}

	syncZ80_variantB(0x80)

	global.game.paused = false
#endif
}


#if STANDALONE

function bool BeginGamePause()
{
	if (global.game_mode == 0x0c && isSonicIntro() && global.level_started == 0)
	{
		// Skip AIZ 1 Sonic intro
		//  -> Note that the Knuckles intro has its own handler
		timer.alldata = 0
		checkpoint.number = 1
		checkpoint.x = 0x13a0
		checkpoint.y = 0x041a
		Checkpoint.SaveCurrentState()
		checkpoint.camera.x = 0x1308
		checkpoint.camera.y = 0x0390
		level.restart = 1

		// Prevent game pause
		return false
	}

	// Enter game pause
	return true
}

function void GamePause.Menu()
{
	bool canRestart = !global.pause_disabled && (global.game_mode == 0x0c && global.stage_type == 0 && u8[0xffffb000 + 0x05] <= base_state.HURT) && !competition_mode.active

#if 1

	// Use the C++ game pause menu
	Game.onGamePause(canRestart)

#else

	// Script implementation of game pause

	// Pause currently playing game music and sounds
	Audio.pauseContext(AudioContext.CONTEXT_MUSIC)
	Audio.pauseContext(AudioContext.CONTEXT_SOUND)

#if GAMEAPP
	// Handle skippable cutscene
	bool wasInSkippableCutscene = Game.isInSkippableCutscene()
	Game.endSkippableCutscene()
#endif

	// TODO: Restart and Options must be made optional

	constant float KEY_REPEAT_TIMEOUT = 0.4f
	constant float KEY_REPEAT_DELAY   = 0.125f
	float keyRepeatTimer = KEY_REPEAT_TIMEOUT
	s8 lastPressedInput = -1

	GamePause.selectedEntry = 0
	GamePause.visibility = 0.0f

	while (true)
	{
		// Inner loop will be exited once the player selected an entry in the menu
		while (true)
		{
			float deltaSeconds = 1.0f / 60.0f

			// Fade-in
			if (GamePause.visibility < 1.0f)
				GamePause.visibility = min(GamePause.visibility + deltaSeconds * 12.0f, 1.0f)

			// Use lifetime context 1 for everything rendered by the pause menu
			//  -> This allows for selectively clearing these sprites, texts, etc. in each frame without touching the game's rendered content
			Renderer.resetLifetimeContext(1)
			Renderer.setLifetimeContext(1)

			GamePause.DrawMenu()

			waitForNextFrame()

			if (Input.buttonPressed(0, BUTTON_START) || Input.buttonPressed(0, BUTTON_A) || Input.buttonPressed(0, BUTTON_X))
				break

			// Handle key repeat
			s8 currentInput = -1
			{
				if (Input.buttonPressed(BUTTON_UP))
					currentInput = BUTTON_UP
				else if (Input.buttonPressed(BUTTON_DOWN))
					currentInput = BUTTON_DOWN
				else if (lastPressedInput >= 0 && Input.buttonDown(lastPressedInput))
					currentInput = lastPressedInput

				lastPressedInput = currentInput

				if (currentInput == -1)
				{
					// No input at all, so reset key repeat
					keyRepeatTimer = KEY_REPEAT_TIMEOUT
				}
				else if (Input.buttonPressed(currentInput))
				{
					// Input pressed for the first frame now
					keyRepeatTimer = KEY_REPEAT_TIMEOUT
				}
				else
				{
					// Input held down
					keyRepeatTimer -= deltaSeconds
					if (keyRepeatTimer <= 0.001f)
						keyRepeatTimer = KEY_REPEAT_DELAY
					else
						currentInput = -1
				}
			}

			s8 entryChange = (currentInput == BUTTON_UP) ? -1 : (currentInput == BUTTON_DOWN) ? 1 : 0
			if (entryChange != 0)
			{
				Audio.playAudio(0x5b)
				GamePause.selectedEntry = (GamePause.selectedEntry + GamePause.ENTRY_TEXTS.length() + entryChange) % GamePause.ENTRY_TEXTS.length()
			}

			// TODO: Add screenshot mode
		}

		if (GamePause.selectedEntry == 0)
		{
			// Leave this menu again and continue gameplay
			// TODO: Handle fade-out - this requires rendering the pause menu while the game is running again
			break
		}
		else if (GamePause.selectedEntry == 1)
		{
			// TODO: First open the dialog menu for Restart

			if (false)
			{
				restartLevel()
			}
			else
			{
				restartAtCheckpoint()
			}
			break
		}
		else if (GamePause.selectedEntry == 2)
		{
		#if GAMEAPP
			// Open in-game options
			// TODO: How about a quick fade-out here as well?
			Game.openOptionsMenu()
		#endif
		}
		else if (GamePause.selectedEntry == 3)
		{
			// TODO: First open the dialog menu for Exit Game

		#if GAMEAPP
			// TODO: Properly fade-out the game
			Game.returnToMainMenu()
			yieldExecution()
		#endif
		}
	}

	Renderer.resetLifetimeContext(1)

	// Resume game audio
	Audio.resumeContext(AudioContext.CONTEXT_MUSIC)
	Audio.resumeContext(AudioContext.CONTEXT_SOUND)

#if GAMEAPP
	if (wasInSkippableCutscene)
		Game.startSkippableCutscene()
#endif

#endif
}


function void GamePause.UpdateFadeOut()
{
	// Fading already done?
	if (GamePause.visibility <= 0.0f)
		return

	// Don't fade out during pause, only afterwards
	if (global.game.paused)
		return

	// Fade-out
	float deltaSeconds = 1.0f / 60.0f
	GamePause.visibility = max(GamePause.visibility - deltaSeconds * 12.0f, 0.0f)

	if (GamePause.visibility > 0.0f)
	{
		GamePause.DrawMenu()
	}
}


function void GamePause.DrawMenu()
{
	u16 rightAnchor = getScreenWidth() + Math.roundToInt((1.0f - GamePause.visibility) * 160)
	u16 py = getScreenHeight() - GamePause.ENTRY_TEXTS.length() * GamePause.LINE_HEIGHT

	Renderer.drawSprite("pause_screen_upper", rightAnchor - 210, 0, 0, 0x40, 0xff00)
	Renderer.drawSprite("pause_screen_lower", rightAnchor - 190, py - 8, 0, 0x40, 0xff00)

	for (u8 k = 0; k < GamePause.ENTRY_TEXTS.length(); ++k)
	{
		u32 color = 0xb0b0b0e0
		if (GamePause.selectedEntry == k)
			color = (global.framecounter % 30 < 15) ? 0xffff00ff : 0xffffffff

		Renderer.drawText(ActSelect.TITLE_FONT, rightAnchor - 16, py + 11, GamePause.ENTRY_TEXTS[k], color, 6, 0, 0xff01, false)
		py += GamePause.LINE_HEIGHT
	}
}

#endif
